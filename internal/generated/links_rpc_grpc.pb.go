// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: protobuf/links_rpc.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinksClient is the client API for Links service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinksClient interface {
	GetOriginalLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Link, error)
	SaveAbbreviatedLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Link, error)
}

type linksClient struct {
	cc grpc.ClientConnInterface
}

func NewLinksClient(cc grpc.ClientConnInterface) LinksClient {
	return &linksClient{cc}
}

func (c *linksClient) GetOriginalLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Link, error) {
	out := new(Link)
	err := c.cc.Invoke(ctx, "/protobuf.Links/GetOriginalLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksClient) SaveAbbreviatedLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Link, error) {
	out := new(Link)
	err := c.cc.Invoke(ctx, "/protobuf.Links/SaveAbbreviatedLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinksServer is the server API for Links service.
// All implementations should embed UnimplementedLinksServer
// for forward compatibility
type LinksServer interface {
	GetOriginalLink(context.Context, *Link) (*Link, error)
	SaveAbbreviatedLink(context.Context, *Link) (*Link, error)
}

// UnimplementedLinksServer should be embedded to have forward compatible implementations.
type UnimplementedLinksServer struct {
}

func (UnimplementedLinksServer) GetOriginalLink(context.Context, *Link) (*Link, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalLink not implemented")
}
func (UnimplementedLinksServer) SaveAbbreviatedLink(context.Context, *Link) (*Link, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAbbreviatedLink not implemented")
}

// UnsafeLinksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinksServer will
// result in compilation errors.
type UnsafeLinksServer interface {
	mustEmbedUnimplementedLinksServer()
}

func RegisterLinksServer(s grpc.ServiceRegistrar, srv LinksServer) {
	s.RegisterService(&Links_ServiceDesc, srv)
}

func _Links_GetOriginalLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).GetOriginalLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Links/GetOriginalLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).GetOriginalLink(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

func _Links_SaveAbbreviatedLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).SaveAbbreviatedLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Links/SaveAbbreviatedLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).SaveAbbreviatedLink(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

// Links_ServiceDesc is the grpc.ServiceDesc for Links service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Links_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Links",
	HandlerType: (*LinksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOriginalLink",
			Handler:    _Links_GetOriginalLink_Handler,
		},
		{
			MethodName: "SaveAbbreviatedLink",
			Handler:    _Links_SaveAbbreviatedLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/links_rpc.proto",
}
